// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

// MapToString is a right-bias mapping function and an alias for MapRightToString
func (e *EitherStringOrString) MapToString(f func(string) string) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherStringOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapToString is a right-bias mapping function and an alias for FlatMapRightToString
func (e *EitherStringOrString) FlatMapToString(f func(string) *EitherStringOrString) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}

// MapLeftToString maps the left'ness of the either to a new either of type EitherStringOrString
func (e *EitherStringOrString) MapLeftToString(f func(string) string) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   f(e.left),
			isLeft: true,
		}
	}
	return &EitherStringOrString{
		right:  e.right,
		isLeft: false,
	}
}

// MapRightToString maps the right'ness of the either to a new either of type EitherStringOrString
func (e *EitherStringOrString) MapRightToString(f func(string) string) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherStringOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapLeftToString maps the left'ness of the either to a new Either of type EitherStringOrString
func (e *EitherStringOrString) FlatMapLeftToString(f func(string) *EitherStringOrString) *EitherStringOrString {
	if e.isLeft {
		return f(e.left)
	}
	return &EitherStringOrString{
		right:  e.right,
		isLeft: false,
	}
}

// FlatMapRightToString maps the right'ness of the either to a new Either of type EitherStringOrString
func (e *EitherStringOrString) FlatMapRightToString(f func(string) *EitherStringOrString) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}

// MapToString is a right-bias mapping function and an alias for MapRightToString
func (e *EitherStringOrInt) MapToString(f func(int) string) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherStringOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapToString is a right-bias mapping function and an alias for FlatMapRightToString
func (e *EitherStringOrInt) FlatMapToString(f func(int) *EitherStringOrString) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}

// MapLeftToString maps the left'ness of the either to a new either of type EitherStringOrInt
func (e *EitherStringOrInt) MapLeftToString(f func(string) string) *EitherStringOrInt {
	if e.isLeft {
		return &EitherStringOrInt{
			left:   f(e.left),
			isLeft: true,
		}
	}
	return &EitherStringOrInt{
		right:  e.right,
		isLeft: false,
	}
}

// MapRightToString maps the right'ness of the either to a new either of type EitherStringOrInt
func (e *EitherStringOrInt) MapRightToString(f func(int) string) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherStringOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapLeftToString maps the left'ness of the either to a new Either of type EitherStringOrInt
func (e *EitherStringOrInt) FlatMapLeftToString(f func(string) *EitherStringOrInt) *EitherStringOrInt {
	if e.isLeft {
		return f(e.left)
	}
	return &EitherStringOrInt{
		right:  e.right,
		isLeft: false,
	}
}

// FlatMapRightToString maps the right'ness of the either to a new Either of type EitherStringOrString
func (e *EitherStringOrInt) FlatMapRightToString(f func(int) *EitherStringOrString) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}

// MapToString is a right-bias mapping function and an alias for MapRightToString
func (e *EitherIntOrString) MapToString(f func(string) string) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherIntOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapToString is a right-bias mapping function and an alias for FlatMapRightToString
func (e *EitherIntOrString) FlatMapToString(f func(string) *EitherIntOrString) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}

// MapLeftToString maps the left'ness of the either to a new either of type EitherStringOrString
func (e *EitherIntOrString) MapLeftToString(f func(int) string) *EitherStringOrString {
	if e.isLeft {
		return &EitherStringOrString{
			left:   f(e.left),
			isLeft: true,
		}
	}
	return &EitherStringOrString{
		right:  e.right,
		isLeft: false,
	}
}

// MapRightToString maps the right'ness of the either to a new either of type EitherStringOrString
func (e *EitherIntOrString) MapRightToString(f func(string) string) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherIntOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapLeftToString maps the left'ness of the either to a new Either of type EitherStringOrString
func (e *EitherIntOrString) FlatMapLeftToString(f func(int) *EitherStringOrString) *EitherStringOrString {
	if e.isLeft {
		return f(e.left)
	}
	return &EitherStringOrString{
		right:  e.right,
		isLeft: false,
	}
}

// FlatMapRightToString maps the right'ness of the either to a new Either of type EitherIntOrString
func (e *EitherIntOrString) FlatMapRightToString(f func(string) *EitherIntOrString) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}

// MapToString is a right-bias mapping function and an alias for MapRightToString
func (e *EitherIntOrInt) MapToString(f func(int) string) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherIntOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapToString is a right-bias mapping function and an alias for FlatMapRightToString
func (e *EitherIntOrInt) FlatMapToString(f func(int) *EitherIntOrString) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}

// MapLeftToString maps the left'ness of the either to a new either of type EitherStringOrInt
func (e *EitherIntOrInt) MapLeftToString(f func(int) string) *EitherStringOrInt {
	if e.isLeft {
		return &EitherStringOrInt{
			left:   f(e.left),
			isLeft: true,
		}
	}
	return &EitherStringOrInt{
		right:  e.right,
		isLeft: false,
	}
}

// MapRightToString maps the right'ness of the either to a new either of type EitherStringOrInt
func (e *EitherIntOrInt) MapRightToString(f func(int) string) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return &EitherIntOrString{
		right:  f(e.right),
		isLeft: false,
	}
}

// FlatMapLeftToString maps the left'ness of the either to a new Either of type EitherStringOrInt
func (e *EitherIntOrInt) FlatMapLeftToString(f func(int) *EitherStringOrInt) *EitherStringOrInt {
	if e.isLeft {
		return f(e.left)
	}
	return &EitherStringOrInt{
		right:  e.right,
		isLeft: false,
	}
}

// FlatMapRightToString maps the right'ness of the either to a new Either of type EitherIntOrString
func (e *EitherIntOrInt) FlatMapRightToString(f func(int) *EitherIntOrString) *EitherIntOrString {
	if e.isLeft {
		return &EitherIntOrString{
			left:   e.left,
			isLeft: true,
		}
	}
	return f(e.right)
}
