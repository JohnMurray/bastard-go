// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

// MapToString allows for a safe transformation of a maybe of type string to a maybe
// of type string. Note that the function f is only called if the StringMaybe is a
// some-type.
func (m *StringMaybe) MapToString(f func(string) string) *StringMaybe {
	if m.empty {
		return &StringMaybe{
			empty: true,
		}
	}
	return &StringMaybe{
		value: f(m.value),
	}
}

// FlatMapToString allows for a safe transformation of a maybe of type string to a maybe
// of type string. Note that the function f is only called if the StringMaybe is a
// some-type.
func (m *StringMaybe) FlatMapToString(f func(string) *StringMaybe) *StringMaybe {
	if m.empty {
		return &StringMaybe{
			empty: true,
		}
	}
	return f(m.value)
}

// MapToInt allows for a safe transformation of a maybe of type string to a maybe
// of type int. Note that the function f is only called if the StringMaybe is a
// some-type.
func (m *StringMaybe) MapToInt(f func(string) int) *IntMaybe {
	if m.empty {
		return &IntMaybe{
			empty: true,
		}
	}
	return &IntMaybe{
		value: f(m.value),
	}
}

// FlatMapToInt allows for a safe transformation of a maybe of type string to a maybe
// of type int. Note that the function f is only called if the StringMaybe is a
// some-type.
func (m *StringMaybe) FlatMapToInt(f func(string) *IntMaybe) *IntMaybe {
	if m.empty {
		return &IntMaybe{
			empty: true,
		}
	}
	return f(m.value)
}

// MapToString allows for a safe transformation of a maybe of type int to a maybe
// of type string. Note that the function f is only called if the IntMaybe is a
// some-type.
func (m *IntMaybe) MapToString(f func(int) string) *StringMaybe {
	if m.empty {
		return &StringMaybe{
			empty: true,
		}
	}
	return &StringMaybe{
		value: f(m.value),
	}
}

// FlatMapToString allows for a safe transformation of a maybe of type int to a maybe
// of type string. Note that the function f is only called if the IntMaybe is a
// some-type.
func (m *IntMaybe) FlatMapToString(f func(int) *StringMaybe) *StringMaybe {
	if m.empty {
		return &StringMaybe{
			empty: true,
		}
	}
	return f(m.value)
}

// MapToInt allows for a safe transformation of a maybe of type int to a maybe
// of type int. Note that the function f is only called if the IntMaybe is a
// some-type.
func (m *IntMaybe) MapToInt(f func(int) int) *IntMaybe {
	if m.empty {
		return &IntMaybe{
			empty: true,
		}
	}
	return &IntMaybe{
		value: f(m.value),
	}
}

// FlatMapToInt allows for a safe transformation of a maybe of type int to a maybe
// of type int. Note that the function f is only called if the IntMaybe is a
// some-type.
func (m *IntMaybe) FlatMapToInt(f func(int) *IntMaybe) *IntMaybe {
	if m.empty {
		return &IntMaybe{
			empty: true,
		}
	}
	return f(m.value)
}
